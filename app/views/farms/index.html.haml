:css
  .ui-autocomplete {
    max-height: 100px;
    overflow-y: auto;
    /* prevent horizontal scrollbar */
    overflow-x: hidden;
    position: absolute;
    top: 0;
    left: 0;
    cursor: default;
  }


-# =hybridMap

-content_for(:left_bar_title, "Farms")
-content_for(:left_bar_content) do
  = link_to 'New Farm', new_farm_path, :id => "create_farm", :class => "left_bar_button"
  = link_to "Export Farms as CSV", farms_path(format: "csv"), :class=> "left_bar_button", :id => "export_csv"
  %div.left_bar_button
    %h2 Import Farms
    = form_tag import_farms_path, multipart: true do
      = file_field_tag :file, :id=>"file"
      = submit_tag "Import", :id=>"Import", :disabled=>true
  %div.left_bar_button
    %h2 Filters
    .ui-widget
      %h2 Pay Groups:
      %input#tags{:size => "15", :style => "font-size:17px"}
    = form_tag farms_path, :method => :get, "id" => "paygroups_form" do
      Include:
      %br
      - PayGroup.all.each do |paygroup|
        %h3= paygroup.name
        = check_box_tag "paygroups[#{paygroup.id}]", paygroup.id, @paygroups[paygroup.id] ? true : false
        %br
      %h2 Time window
      = date_select farms_path, { start_year: 100.years.ago.year, end_year: Date.today.year, default: Date.today}
      = submit_tag 'Refresh', "id" => "paygroups_submit"

-content_for(:content) do
  %table.data.sortable.mapdata
    %tr
      %th= sortable_header('Name', @sort_by)
      %th= sortable_header('Bushes', @sort_by)
      %th= sortable_header('Fertilizer', @sort_by)
      %th= sortable_header('Workers', @sort_by)
      %th= sortable_header('Latitude', @sort_by)
      %th= sortable_header('Longitude', @sort_by)
      %th= sortable_header('Pay Group', @sort_by)
      %th= sortable_header('Notes', @sort_by)
      %th Options
    -@farms.each do |farm|
      %tr
        -if farm.name
          %td.name= link_to farm.name, farm
        -else
          %td
        -if farm.bushes
          %td.bushes= link_to farm.bushes, farm
          %td.fertilizer= link_to fertilizer(farm.bushes), farm
        -else
          %td
          %td
        -if farm.workers      
          %td.workers= link_to farm.workers, farm
        -else
          %td
        -if farm.latitude
          %td.latitude= link_to farm.latitude, farm
        -else
          %td
        -if farm.longitude
          %td.longitude= link_to farm.longitude, farm
        -else
          %td
        -if farm.payGroup
          %td.payGroup.name= link_to farm.payGroup.name, farm
        -else
          %td
        -if farm.notes
          %td.notes= link_to farm.notes, farm
        -else
          %td
        %td= link_to('Edit', edit_farm_path(farm), :class=>"edit", :id => "edit #{farm.name}") + ' | ' + link_to('Destroy', farm, :class=> "edit", method: :delete, data: { confirm: 'Are you sure?' })
    %tr
      %td
      %td.sum= "#{@bush_sum} (Total)"
      %td
      %td
      %td
      %td
      %td
      %td

  %div#map

:javascript
$document.ready(function() {
  $('#file').change(function() {
    $('#Import').removeAttr('disabled');
  });


              var availableTags = [
                "ActionScript",
                "AppleScript",
                "Asp",
                "BASIC",
                "C",
                "C++",
                "Clojure",
                "COBOL",
                "ColdFusion",
                "Erlang",
                "Fortran",
                "Groovy",
                "Haskell",
                "Java",
                "JavaScript",
                "Lisp",
                "Perl",
                "PHP",
                "Python",
                "Ruby",
                "Scala",
                "Scheme"
              ];
              function split( val ) {
                return val.split( /,\s*/ );
              }
              function extractLast( term ) {
                return split( term ).pop();
              }
 
              $( "#tags" )
                // don't navigate away from the field on tab when selecting an item
                .bind( "keydown", function( event ) {
                  if ( event.keyCode === $.ui.keyCode.TAB &&
                      $( this ).data( "ui-autocomplete" ).menu.active ) {
                    event.preventDefault();
                  }
                })
                .autocomplete({
                  minLength: 0,
                  source: function( request, response ) {
                    // delegate back to autocomplete, but extract the last term
                    response( $.ui.autocomplete.filter(
                      availableTags, extractLast( request.term ) ) );
                  },
                  focus: function() {
                    // prevent value inserted on focus
                    return false;
                  },
                  select: function( event, ui ) {
                    var terms = split( this.value );
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push( ui.item.value );
                    // add placeholder to get the comma-and-space at the end
                    terms.push( "" );
                    this.value = terms.join( ", " );
                    return false;
                  }
                });

});


